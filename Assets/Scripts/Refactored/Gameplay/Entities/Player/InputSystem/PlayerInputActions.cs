//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Refactored/Gameplay/Entities/Player/InputSystem/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Spark.Refactored.Gameplay.Entities.Player.InputSystem
{
    public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""0a45ebcd-223a-4796-9f4e-72d0c94d57c3"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""097b5fcb-2e2f-428d-aafd-c3c27496ddfc"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inspection"",
                    ""type"": ""Value"",
                    ""id"": ""65e0df2e-4cf7-4ed4-a10e-3a6cd1271924"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Ability: Flash Activate"",
                    ""type"": ""Button"",
                    ""id"": ""02d8f496-548f-44e4-857b-07db85660c59"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability: Invulner Activate"",
                    ""type"": ""Button"",
                    ""id"": ""2a8c6675-46d0-4bab-9b65-952da363832c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability: MedKit Activate"",
                    ""type"": ""Button"",
                    ""id"": ""cfa6e6d0-abe6-4982-84b1-3889e3ad7e12"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon: Activate"",
                    ""type"": ""Button"",
                    ""id"": ""13d02d82-d57c-41a2-9a6e-29e89aa6b205"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon: Change Melee Type"",
                    ""type"": ""Button"",
                    ""id"": ""fd555992-dc1c-415a-a0f3-b6a543df400f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon: Change Ranged Type"",
                    ""type"": ""Button"",
                    ""id"": ""7dec175a-3a1e-43c7-9cbb-80b1ae2ef37b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon: Change Category"",
                    ""type"": ""Button"",
                    ""id"": ""eb432c73-bcb5-4014-a0fa-08450e4495e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon: Change Type"",
                    ""type"": ""Button"",
                    ""id"": ""2ed94864-e82c-47f7-a91d-772d4cd09e24"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon: Reload"",
                    ""type"": ""Button"",
                    ""id"": ""8ea17b57-b336-4309-93f8-f7eac409348f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""4b026fa2-006c-4cdd-9385-0bbcaa386e61"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""b4413a0b-83ef-4a13-8992-36eb4f944143"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""1024b68a-1134-42ce-a601-ea31fbc65e25"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""e1d67706-81c4-4265-9084-c8b923fb0989"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""ac7c773c-30ea-41f2-918e-bf0ec8a3f2b6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Stick"",
                    ""id"": ""4f778494-c73c-4d5b-a7a4-313c00b0af47"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""35cf0af9-6052-4ffc-a902-9db03d3081dc"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""aefc5d85-debf-4ae9-bf48-d5057276b6f9"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""6addfbb9-96e5-4c02-91d9-4d65fefc7c07"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""9542ad20-254b-4e30-92d3-ecfca00a1770"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""85ad37d2-39ad-4122-b5ca-fdb75ab10b33"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inspection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94a7b239-0f53-4397-8071-955796eef0ff"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability: Flash Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b922906-f612-4cc0-9388-9f4804c8373c"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability: Invulner Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6bd7724-480a-48d2-8f4b-9b399ec677ff"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability: MedKit Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f7d847da-c52a-4408-848f-c01bc7de44fb"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon: Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7435025d-6245-48a0-9c87-f338dae0300e"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon: Change Category"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3f0103b-ff42-46f7-9b07-a475fce6c39e"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon: Change Type"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""263b00fa-f140-433d-99f0-0be8b8bd5a2c"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon: Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
            m_Player_Inspection = m_Player.FindAction("Inspection", throwIfNotFound: true);
            m_Player_AbilityFlashActivate = m_Player.FindAction("Ability: Flash Activate", throwIfNotFound: true);
            m_Player_AbilityInvulnerActivate = m_Player.FindAction("Ability: Invulner Activate", throwIfNotFound: true);
            m_Player_AbilityMedKitActivate = m_Player.FindAction("Ability: MedKit Activate", throwIfNotFound: true);
            m_Player_WeaponActivate = m_Player.FindAction("Weapon: Activate", throwIfNotFound: true);
            m_Player_WeaponChangeMeleeType = m_Player.FindAction("Weapon: Change Melee Type", throwIfNotFound: true);
            m_Player_WeaponChangeRangedType = m_Player.FindAction("Weapon: Change Ranged Type", throwIfNotFound: true);
            m_Player_WeaponChangeCategory = m_Player.FindAction("Weapon: Change Category", throwIfNotFound: true);
            m_Player_WeaponChangeType = m_Player.FindAction("Weapon: Change Type", throwIfNotFound: true);
            m_Player_WeaponReload = m_Player.FindAction("Weapon: Reload", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
        private readonly InputAction m_Player_Movement;
        private readonly InputAction m_Player_Inspection;
        private readonly InputAction m_Player_AbilityFlashActivate;
        private readonly InputAction m_Player_AbilityInvulnerActivate;
        private readonly InputAction m_Player_AbilityMedKitActivate;
        private readonly InputAction m_Player_WeaponActivate;
        private readonly InputAction m_Player_WeaponChangeMeleeType;
        private readonly InputAction m_Player_WeaponChangeRangedType;
        private readonly InputAction m_Player_WeaponChangeCategory;
        private readonly InputAction m_Player_WeaponChangeType;
        private readonly InputAction m_Player_WeaponReload;
        public struct PlayerActions
        {
            private @PlayerInputActions m_Wrapper;
            public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_Player_Movement;
            public InputAction @Inspection => m_Wrapper.m_Player_Inspection;
            public InputAction @AbilityFlashActivate => m_Wrapper.m_Player_AbilityFlashActivate;
            public InputAction @AbilityInvulnerActivate => m_Wrapper.m_Player_AbilityInvulnerActivate;
            public InputAction @AbilityMedKitActivate => m_Wrapper.m_Player_AbilityMedKitActivate;
            public InputAction @WeaponActivate => m_Wrapper.m_Player_WeaponActivate;
            public InputAction @WeaponChangeMeleeType => m_Wrapper.m_Player_WeaponChangeMeleeType;
            public InputAction @WeaponChangeRangedType => m_Wrapper.m_Player_WeaponChangeRangedType;
            public InputAction @WeaponChangeCategory => m_Wrapper.m_Player_WeaponChangeCategory;
            public InputAction @WeaponChangeType => m_Wrapper.m_Player_WeaponChangeType;
            public InputAction @WeaponReload => m_Wrapper.m_Player_WeaponReload;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Inspection.started += instance.OnInspection;
                @Inspection.performed += instance.OnInspection;
                @Inspection.canceled += instance.OnInspection;
                @AbilityFlashActivate.started += instance.OnAbilityFlashActivate;
                @AbilityFlashActivate.performed += instance.OnAbilityFlashActivate;
                @AbilityFlashActivate.canceled += instance.OnAbilityFlashActivate;
                @AbilityInvulnerActivate.started += instance.OnAbilityInvulnerActivate;
                @AbilityInvulnerActivate.performed += instance.OnAbilityInvulnerActivate;
                @AbilityInvulnerActivate.canceled += instance.OnAbilityInvulnerActivate;
                @AbilityMedKitActivate.started += instance.OnAbilityMedKitActivate;
                @AbilityMedKitActivate.performed += instance.OnAbilityMedKitActivate;
                @AbilityMedKitActivate.canceled += instance.OnAbilityMedKitActivate;
                @WeaponActivate.started += instance.OnWeaponActivate;
                @WeaponActivate.performed += instance.OnWeaponActivate;
                @WeaponActivate.canceled += instance.OnWeaponActivate;
                @WeaponChangeMeleeType.started += instance.OnWeaponChangeMeleeType;
                @WeaponChangeMeleeType.performed += instance.OnWeaponChangeMeleeType;
                @WeaponChangeMeleeType.canceled += instance.OnWeaponChangeMeleeType;
                @WeaponChangeRangedType.started += instance.OnWeaponChangeRangedType;
                @WeaponChangeRangedType.performed += instance.OnWeaponChangeRangedType;
                @WeaponChangeRangedType.canceled += instance.OnWeaponChangeRangedType;
                @WeaponChangeCategory.started += instance.OnWeaponChangeCategory;
                @WeaponChangeCategory.performed += instance.OnWeaponChangeCategory;
                @WeaponChangeCategory.canceled += instance.OnWeaponChangeCategory;
                @WeaponChangeType.started += instance.OnWeaponChangeType;
                @WeaponChangeType.performed += instance.OnWeaponChangeType;
                @WeaponChangeType.canceled += instance.OnWeaponChangeType;
                @WeaponReload.started += instance.OnWeaponReload;
                @WeaponReload.performed += instance.OnWeaponReload;
                @WeaponReload.canceled += instance.OnWeaponReload;
            }

            private void UnregisterCallbacks(IPlayerActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @Inspection.started -= instance.OnInspection;
                @Inspection.performed -= instance.OnInspection;
                @Inspection.canceled -= instance.OnInspection;
                @AbilityFlashActivate.started -= instance.OnAbilityFlashActivate;
                @AbilityFlashActivate.performed -= instance.OnAbilityFlashActivate;
                @AbilityFlashActivate.canceled -= instance.OnAbilityFlashActivate;
                @AbilityInvulnerActivate.started -= instance.OnAbilityInvulnerActivate;
                @AbilityInvulnerActivate.performed -= instance.OnAbilityInvulnerActivate;
                @AbilityInvulnerActivate.canceled -= instance.OnAbilityInvulnerActivate;
                @AbilityMedKitActivate.started -= instance.OnAbilityMedKitActivate;
                @AbilityMedKitActivate.performed -= instance.OnAbilityMedKitActivate;
                @AbilityMedKitActivate.canceled -= instance.OnAbilityMedKitActivate;
                @WeaponActivate.started -= instance.OnWeaponActivate;
                @WeaponActivate.performed -= instance.OnWeaponActivate;
                @WeaponActivate.canceled -= instance.OnWeaponActivate;
                @WeaponChangeMeleeType.started -= instance.OnWeaponChangeMeleeType;
                @WeaponChangeMeleeType.performed -= instance.OnWeaponChangeMeleeType;
                @WeaponChangeMeleeType.canceled -= instance.OnWeaponChangeMeleeType;
                @WeaponChangeRangedType.started -= instance.OnWeaponChangeRangedType;
                @WeaponChangeRangedType.performed -= instance.OnWeaponChangeRangedType;
                @WeaponChangeRangedType.canceled -= instance.OnWeaponChangeRangedType;
                @WeaponChangeCategory.started -= instance.OnWeaponChangeCategory;
                @WeaponChangeCategory.performed -= instance.OnWeaponChangeCategory;
                @WeaponChangeCategory.canceled -= instance.OnWeaponChangeCategory;
                @WeaponChangeType.started -= instance.OnWeaponChangeType;
                @WeaponChangeType.performed -= instance.OnWeaponChangeType;
                @WeaponChangeType.canceled -= instance.OnWeaponChangeType;
                @WeaponReload.started -= instance.OnWeaponReload;
                @WeaponReload.performed -= instance.OnWeaponReload;
                @WeaponReload.canceled -= instance.OnWeaponReload;
            }

            public void RemoveCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActions @Player => new PlayerActions(this);
        public interface IPlayerActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnInspection(InputAction.CallbackContext context);
            void OnAbilityFlashActivate(InputAction.CallbackContext context);
            void OnAbilityInvulnerActivate(InputAction.CallbackContext context);
            void OnAbilityMedKitActivate(InputAction.CallbackContext context);
            void OnWeaponActivate(InputAction.CallbackContext context);
            void OnWeaponChangeMeleeType(InputAction.CallbackContext context);
            void OnWeaponChangeRangedType(InputAction.CallbackContext context);
            void OnWeaponChangeCategory(InputAction.CallbackContext context);
            void OnWeaponChangeType(InputAction.CallbackContext context);
            void OnWeaponReload(InputAction.CallbackContext context);
        }
    }
}
